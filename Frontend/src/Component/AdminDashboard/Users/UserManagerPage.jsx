// import React, { useContext, useState, useEffect } from "react";
// import axios from "axios";
// import { Link } from "react-router-dom";
// import Sidebar from "../Sidebar";
// import UserCard from "./UserCard";
// import { UserContext } from "../../../Utils/Context/userContext";

// export default function UserManagerPage() {
//   const { user } = useContext(UserContext);

//   const [allUsers, setAllUsers] = useState([]);
//   const [users, setUsers] = useState([]);
//   const [filteredUsers, setFilteredUsers] = useState([]);
//   const [selectedUsers, setSelectedUsers] = useState([]);
//   const [assignToId, setAssignToId] = useState("");

//   const [filters, setFilters] = useState({
//     name: "",
//     NN: "",
//     role: "",
//     status: "",
//     priority: "",
//     interstedLocation: "",
//     type: "",
//   });

//   useEffect(() => {
//     const fetchUsers = async () => {
//       try {
//         const res = await axios.get("http://localhost:5000/api/users");
//         setAllUsers(res.data);
//         const filtered = res.data.filter(
//           (u) => u.role === "ูุณุชุฎุฏู" && !u.assignedTo
//         );
//         setUsers(filtered);
//         setFilteredUsers(filtered);
//       } catch (error) {
//         console.error("ูุดู ูู ุฌูุจ ุงูุจูุงูุงุช:", error);
//       }
//     };
//     fetchUsers();
//   }, []);

//   useEffect(() => {
//     const filtered = users.filter((user) => {
//       const nameMatch = user.name?.toLowerCase().includes(filters.name.toLowerCase());
//       const nnMatch = user.NN?.includes(filters.NN);
//       const roleMatch = user.role?.includes(filters.role);
//       const statusMatch = user.status?.includes(filters.status);
//       const priorityMatch = user.priority?.includes(filters.priority);
//       const locationMatch = user.interstedLocation?.includes(filters.interstedLocation);
//       const typeMatch = user.type?.includes(filters.type);
//       return (
//         nameMatch &&
//         nnMatch &&
//         roleMatch &&
//         statusMatch &&
//         priorityMatch &&
//         locationMatch &&
//         typeMatch
//       );
//     });

//     setFilteredUsers(filtered);
//   }, [filters, users]);

//   const resetFilters = () => {
//     setFilters({
//       name: "",
//       NN: "",
//       role: "",
//       status: "",
//       priority: "",
//       interstedLocation: "",
//       type: "",
//     });
//   };

//   const toggleUserSelection = (id) => {
//     setSelectedUsers((prev) =>
//       prev.includes(id) ? prev.filter((uid) => uid !== id) : [...prev, id]
//     );
//   };

//   const toggleSelectAll = () => {
//     if (selectedUsers.length === filteredUsers.length) {
//       setSelectedUsers([]);
//     } else {
//       const allIds = filteredUsers.map((user) => user._id);
//       setSelectedUsers(allIds);
//     }
//   };

//   const handleAssignTo = async () => {
//     if (!assignToId || selectedUsers.length === 0) {
//       alert("โ ูุฑุฌู ุชุญุฏูุฏ ูุณุชุฎุฏููู ูููุธู ููุณููุฑ (assignedTo).");
//       return;
//     }

//     try {
//       await Promise.all(
//         selectedUsers.map((userId) =>
//           axios.put(`http://localhost:5000/api/users/${userId}`, {
//             assignedTo: assignToId,
//           })
//         )
//       );
//       alert("โ ุชู ุงูุชุญุฏูุซ ุจูุฌุงุญ");
//       window.location.reload();
//     } catch (err) {
//       console.error("ูุดู ูู ุงูุชุญุฏูุซ:", err);
//       alert("โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุชุญุฏูุซ");
//     }
//   };

//   if (!user || user.role !== "ูุฏูุฑ") {
//     return (
//       <div className="p-4 mt-10 mx-auto max-w-md bg-red-100 border border-red-300 text-red-800 rounded-md text-center shadow">
//         ๐ซ <strong>ูุตูู ูุฑููุถ:</strong> ูุฐู ุงูุตูุญุฉ ูุฎุตุตุฉ ูููุณุคูููู ููุท.
//       </div>
//     );
//   }

//   return (
//     <div className="flex ml-64 min-h-screen bg-gray-100 text-right rtl">
//       <Sidebar />
//       <div className="flex-1 p-6">
//         <div className="flex justify-between items-center mb-6">
//           <h1 className="text-2xl font-bold text-gray-800">ุฅุฏุงุฑุฉ ุงููุณุชุฎุฏููู</h1>
//           <Link
//             to="/admin-dashboard/user/new"
//             className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded shadow"
//           >
//             + ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ
//           </Link>
//         </div>

//         {/* ๐ ููุงุชุฑ ุงูุจุญุซ */}
//         <div
//           dir="rtl"
//           className="bg-white p-4 rounded shadow mb-6 flex flex-col md:flex-row flex-wrap gap-4 items-end"
//         >
//           <input
//             type="text"
//             placeholder="ุจุญุซ ุจุงูุงุณู"
//             className="border p-2 rounded w-full md:w-1/5"
//             value={filters.name}
//             onChange={(e) => setFilters({ ...filters, name: e.target.value })}
//           />

//           <input
//             type="text"
//             placeholder="ุจุญุซ ุจุงูุฑูู ุงููููู"
//             className="border p-2 rounded w-full md:w-1/5"
//             value={filters.NN}
//             onChange={(e) => setFilters({ ...filters, NN: e.target.value })}
//           />

//           <input
//             type="text"
//             placeholder="ุจุญุซ ุจุงูููุทูุฉ ุงูููุชู ุจูุง"
//             className="border p-2 rounded w-full md:w-1/5"
//             value={filters.interstedLocation}
//             onChange={(e) =>
//               setFilters({ ...filters, interstedLocation: e.target.value })
//             }
//           />

//           <select
//             className="border p-2 rounded w-full md:w-1/5"
//             value={filters.status}
//             onChange={(e) => setFilters({ ...filters, status: e.target.value })}
//           >
//             <option value="">ูู ุงูุญุงูุงุช</option>
//             <option value="ุดุฑุงุก">ุดุฑุงุก</option>
//             <option value="ุงูุฌุงุฑ">ุฅูุฌุงุฑ</option>
//             <option value="ุงุณุชุซูุงุฑ">ุงุณุชุซูุงุฑ</option>
//             <option value="ุบูุฑ ูุนุฑูู">ุบูุฑ ูุนุฑูู</option>
//           </select>

//           <select
//             className="border p-2 rounded w-full md:w-1/5"
//             value={filters.priority}
//             onChange={(e) => setFilters({ ...filters, priority: e.target.value })}
//           >
//             <option value="">ูู ุงูุฃููููุงุช</option>
//             <option value="ุนุงูู">ุนุงูู</option>
//             <option value="ูุชูุณุท">ูุชูุณุท</option>
//             <option value="ููุฎูุถ">ููุฎูุถ</option>
//           </select>

//           <select
//             className="border p-2 rounded w-full md:w-1/5"
//             value={filters.type}
//             onChange={(e) => setFilters({ ...filters, type: e.target.value })}
//           >
//             <option value="">ูู ุงูุฃููุงุน</option>
//             <option value="ูุญุชูู">ูุญุชูู</option>
//             <option value="ุญุงูู">ุญุงูู</option>
//             <option value="ุบูุฑ ููุชู">ุบูุฑ ููุชู</option>
//           </select>

//           <button
//             className="text-sm bg-gray-200 hover:bg-gray-300 px-3 py-2 rounded mt-2 md:mt-0"
//             onClick={resetFilters}
//           >
//             ๐งน ูุณุญ ุงูููุงุชุฑ
//           </button>
//         </div>

//         {/* โ ุฒุฑ ุงูุชุนููู */}
//         <div dir="rtl" className="bg-white p-4 mb-4 rounded shadow flex gap-4 items-center">
//           <select
//             className="border p-2 rounded"
//             value={assignToId}
//             onChange={(e) => setAssignToId(e.target.value)}
//           >
//             <option value="">ุงุฎุชุฑ ููุธู ูุชุนูููู</option>
//             {allUsers
//               .filter((u) => u.role === "ุนุถู ุณููุฒ" || u.role === "ุชูู ููุฏุฑ ุณููุฒ")
//               .map((u) => (
//                 <option key={u._id} value={u._id}>
//                   {u.name} - {u.role}
//                 </option>
//               ))}
//           </select>
//           <button
//             onClick={handleAssignTo}
//             className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
//           >
//             ๐ ุชุนููู ูููุณุชุฎุฏููู ุงููุญุฏุฏูู
//           </button>
//         </div>

//         {/* โ ุฒุฑ ุชุญุฏูุฏ ุงููู */}
//         <div className="mb-4 text-right">
//           <button
//             onClick={toggleSelectAll}
//             className="text-sm bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded"
//           >
//             {selectedUsers.length === filteredUsers.length
//               ? "๐ ุฅูุบุงุก ุชุญุฏูุฏ ุงููู"
//               : "๐ ุชุญุฏูุฏ ุงููู"}
//           </button>
//         </div>

//         {/* ๐ฅ ุนุฑุถ ุงููุณุชุฎุฏููู */}
//         <div className="space-y-4">
//           {filteredUsers.length > 0 ? (
//             filteredUsers.map((u) => (
//               <UserCard
//                 key={u._id}
//                 user={u}
//                 selected={selectedUsers.includes(u._id)}
//                 onSelect={toggleUserSelection}
//               />
//             ))
//           ) : (
//             <p className="text-center text-gray-600 py-8">ูุง ููุฌุฏ ูุณุชุฎุฏููู ูุทุงุจููู ุงูููุงุชุฑ.</p>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// }


import React, { useContext, useState, useEffect } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import Sidebar from "../Sidebar";
import UserCard from "./UserCard";
import { UserContext } from "../../../Utils/Context/userContext";

export default function UserManagerPage() {
  const { user } = useContext(UserContext);

  const [allUsers, setAllUsers] = useState([]);
  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [selectedUsers, setSelectedUsers] = useState([]);
  const [assignToId, setAssignToId] = useState("");

  const [filters, setFilters] = useState({
    name: "",
    NN: "",
    role: "",
    status: "",
    priority: "",
    interstedLocation: "",
    type: "",
  });

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const res = await axios.get("http://localhost:5000/api/users");
        setAllUsers(res.data);
        const filtered = res.data.filter(
          (u) => u.role === "ูุณุชุฎุฏู" && !u.assignedTo
        );
        setUsers(filtered);
        setFilteredUsers(filtered);
      } catch (error) {
        console.error("ูุดู ูู ุฌูุจ ุงูุจูุงูุงุช:", error);
      }
    };
    fetchUsers();
  }, []);

  useEffect(() => {
    const filtered = users.filter((user) => {
      const nameMatch = user.name?.toLowerCase().includes(filters.name.toLowerCase());
      const nnMatch = user.NN?.includes(filters.NN);
      const roleMatch = user.role?.includes(filters.role);
      const statusMatch = user.status?.includes(filters.status);
      const priorityMatch = user.priority?.includes(filters.priority);
      const locationMatch = user.interstedLocation?.includes(filters.interstedLocation);
      const typeMatch = user.type?.includes(filters.type);
      return (
        nameMatch &&
        nnMatch &&
        roleMatch &&
        statusMatch &&
        priorityMatch &&
        locationMatch &&
        typeMatch
      );
    });

    setFilteredUsers(filtered);
  }, [filters, users]);

  const resetFilters = () => {
    setFilters({
      name: "",
      NN: "",
      role: "",
      status: "",
      priority: "",
      interstedLocation: "",
      type: "",
    });
  };

  const toggleUserSelection = (id) => {
    setSelectedUsers((prev) =>
      prev.includes(id) ? prev.filter((uid) => uid !== id) : [...prev, id]
    );
  };

  const toggleSelectAll = () => {
    if (selectedUsers.length === filteredUsers.length) {
      setSelectedUsers([]);
    } else {
      const allIds = filteredUsers.map((user) => user._id);
      setSelectedUsers(allIds);
    }
  };

  const handleAssignTo = async () => {
    if (!assignToId || selectedUsers.length === 0) {
      alert("โ ูุฑุฌู ุชุญุฏูุฏ ูุณุชุฎุฏููู ูููุธู ููุณููุฑ (assignedTo).");
      return;
    }

    try {
      await Promise.all(
        selectedUsers.map((userId) =>
          axios.put(`http://localhost:5000/api/users/${userId}`, {
            assignedTo: assignToId,
          })
        )
      );
      alert("โ ุชู ุงูุชุญุฏูุซ ุจูุฌุงุญ");
      window.location.reload();
    } catch (err) {
      console.error("ูุดู ูู ุงูุชุญุฏูุซ:", err);
      alert("โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุชุญุฏูุซ");
    }
  };

  // โ ุงูุฃุฏูุงุฑ ุงููุณููุญ ููุง ุจุฏุฎูู ุงูุตูุญุฉ
  const allowedRoles = [
    "ูุฏูุฑ",
    "ูุฏูุฑ ุงูุฅุฏุงุฑุฉ",
    "ุชูู ููุฏุฑ ูุงุฑูุชูุฌ",
    "ุชูู ููุฏุฑ ุณููุฒ",
    "ุนุถู ูุงุฑูุชูุฌ",
  ];

  console.log(user);

  if (!user || !allowedRoles.includes(user.role)) {
    return (
      <div className="p-4 mt-10 mx-auto max-w-md bg-red-100 border border-red-300 text-red-800 rounded-md text-center shadow">
        ๐ซ <strong>ูุตูู ูุฑููุถ:</strong> ููุณ ูุฏูู ุตูุงุญูุฉ ุงููุตูู ุฅูู ูุฐู ุงูุตูุญุฉ.
      </div>
    );
  }

  // โ ุนุถู ูุงุฑูุชูุฌ ููุท ูุดูู ุฒุฑ ุฅุถุงูุฉ ูุณุชุฎุฏู
  if (user.role === "ุนุถู ูุงุฑูุชูุฌ") {
    return (
      <div className="flex ml-64 min-h-screen bg-gray-100 text-right rtl">
        <Sidebar />
        <div className="flex-1 p-6">
          <h1 className="text-2xl font-bold mb-4 text-gray-800">ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ</h1>
          <Link
            to="/admin-dashboard/user/new"
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded shadow"
          >
            + ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ
          </Link>
        </div>
      </div>
    );
  }

  // โ ุจุงูู ุงูุฃุฏูุงุฑ ุชุดูู ุงูุตูุญุฉ ุงููุงููุฉ
  return (
    <div className="flex ml-64 min-h-screen bg-gray-100 text-right rtl">
      <Sidebar />
      <div className="flex-1 p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800">ุฅุฏุงุฑุฉ ุงููุณุชุฎุฏููู</h1>
          <Link
            to="/admin-dashboard/user/new"
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded shadow"
          >
            + ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ
          </Link>
        </div>

        {/* ๐ ููุงุชุฑ ุงูุจุญุซ */}
        <div
          dir="rtl"
          className="bg-white p-4 rounded shadow mb-6 flex flex-col md:flex-row flex-wrap gap-4 items-end"
        >
          <input
            type="text"
            placeholder="ุจุญุซ ุจุงูุงุณู"
            className="border p-2 rounded w-full md:w-1/5"
            value={filters.name}
            onChange={(e) => setFilters({ ...filters, name: e.target.value })}
          />

          <input
            type="text"
            placeholder="ุจุญุซ ุจุงูุฑูู ุงููููู"
            className="border p-2 rounded w-full md:w-1/5"
            value={filters.NN}
            onChange={(e) => setFilters({ ...filters, NN: e.target.value })}
          />

          <input
            type="text"
            placeholder="ุจุญุซ ุจุงูููุทูุฉ ุงูููุชู ุจูุง"
            className="border p-2 rounded w-full md:w-1/5"
            value={filters.interstedLocation}
            onChange={(e) =>
              setFilters({ ...filters, interstedLocation: e.target.value })
            }
          />

          <select
            className="border p-2 rounded w-full md:w-1/5"
            value={filters.status}
            onChange={(e) => setFilters({ ...filters, status: e.target.value })}
          >
            <option value="">ูู ุงูุญุงูุงุช</option>
            <option value="ุดุฑุงุก">ุดุฑุงุก</option>
            <option value="ุงูุฌุงุฑ">ุฅูุฌุงุฑ</option>
            <option value="ุงุณุชุซูุงุฑ">ุงุณุชุซูุงุฑ</option>
            <option value="ุบูุฑ ูุนุฑูู">ุบูุฑ ูุนุฑูู</option>
          </select>

          <select
            className="border p-2 rounded w-full md:w-1/5"
            value={filters.priority}
            onChange={(e) => setFilters({ ...filters, priority: e.target.value })}
          >
            <option value="">ูู ุงูุฃููููุงุช</option>
            <option value="ุนุงูู">ุนุงูู</option>
            <option value="ูุชูุณุท">ูุชูุณุท</option>
            <option value="ููุฎูุถ">ููุฎูุถ</option>
          </select>

          <select
            className="border p-2 rounded w-full md:w-1/5"
            value={filters.type}
            onChange={(e) => setFilters({ ...filters, type: e.target.value })}
          >
            <option value="">ูู ุงูุฃููุงุน</option>
            <option value="ูุญุชูู">ูุญุชูู</option>
            <option value="ุญุงูู">ุญุงูู</option>
            <option value="ุบูุฑ ููุชู">ุบูุฑ ููุชู</option>
          </select>

          <button
            className="text-sm bg-gray-200 hover:bg-gray-300 px-3 py-2 rounded mt-2 md:mt-0"
            onClick={resetFilters}
          >
            ๐งน ูุณุญ ุงูููุงุชุฑ
          </button>
        </div>

        {/* โ ุฒุฑ ุงูุชุนููู */}
        <div dir="rtl" className="bg-white p-4 mb-4 rounded shadow flex gap-4 items-center">
          <select
            className="border p-2 rounded"
            value={assignToId}
            onChange={(e) => setAssignToId(e.target.value)}
          >
            <option value="">ุงุฎุชุฑ ููุธู ูุชุนูููู</option>
            {allUsers
              .filter((u) => u.role === "ุนุถู ุณููุฒ" || u.role === "ุชูู ููุฏุฑ ุณููุฒ")
              .map((u) => (
                <option key={u._id} value={u._id}>
                  {u.name} - {u.role}
                </option>
              ))}
          </select>
          <button
            onClick={handleAssignTo}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
          >
            ๐ ุชุนููู ูููุณุชุฎุฏููู ุงููุญุฏุฏูู
          </button>
        </div>

        {/* โ ุฒุฑ ุชุญุฏูุฏ ุงููู */}
        <div className="mb-4 text-right">
          <button
            onClick={toggleSelectAll}
            className="text-sm bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded"
          >
            {selectedUsers.length === filteredUsers.length
              ? "๐ ุฅูุบุงุก ุชุญุฏูุฏ ุงููู"
              : "๐ ุชุญุฏูุฏ ุงููู"}
          </button>
        </div>

        {/* ๐ฅ ุนุฑุถ ุงููุณุชุฎุฏููู */}
        <div className="space-y-4">
          {filteredUsers.length > 0 ? (
            filteredUsers.map((u) => (
              <UserCard
                key={u._id}
                user={u}
                selected={selectedUsers.includes(u._id)}
                onSelect={toggleUserSelection}
              />
            ))
          ) : (
            <p className="text-center text-gray-600 py-8">ูุง ููุฌุฏ ูุณุชุฎุฏููู ูุทุงุจููู ุงูููุงุชุฑ.</p>
          )}
        </div>
      </div>
    </div>
  );
}
